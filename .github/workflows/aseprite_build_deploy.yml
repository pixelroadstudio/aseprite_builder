name: Build and deploy Aseprite

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - master

env:
  BUILD_TYPE: Release
  
jobs:
  build-aseprite:
    name: Build Aseprite
    runs-on: ${{ matrix.os }}
    strategy:
       matrix:
         os: [windows-latest]
       fail-fast: false    
    steps:
      - name: (Windows) Install Dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install ninja
          choco install openssl

      - name: Get Skia from cache
        id: skia-cache
        uses: actions/cache@v3
        with:
          path: skia
          key: skia-${{ matrix.os }}-cache-m102

      - name: Download Skia if not in cache
        if: steps.skia-cache.outputs.cache-hit != 'true'
        run: |
          curl -o Skia-Windows-Release-x64.zip -L https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Windows-Release-x64.zip
          unzip Skia-Windows-Release-x64.zip -d skia

      - name: List Skia directory
        run: |
          dir skia
          dir skia/out/Release-x64

      - name: Get latest Aseprite version
        id: aseprite_version
        run: |
          $data = Invoke-RestMethod -Uri https://api.github.com/repos/aseprite/aseprite/releases/latest
          echo "version=$($data.tag_name)" >> $env:GITHUB_OUTPUT
          $sourceUrl = $data.assets | Where-Object { $_.name -match '\.zip$' } | Select-Object -ExpandProperty browser_download_url
          echo "download_url=$sourceUrl" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Download Aseprite release
        run: |
          curl -o Aseprite-source.zip -L ${{ steps.aseprite_version.outputs.download_url }}
          unzip Aseprite-source.zip -d aseprite
          mkdir -p aseprite/build

      - name: Setup Visual Studio Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1

      - name: (Windows) Run CMake
        working-directory: aseprite/build
        shell: pwsh
        run: |
          $SKIA_DIR = Resolve-Path -Path "../../skia"
          $SKIA_OUT_DIR = Resolve-Path -Path "../../skia"
          cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
                -DCMAKE_IGNORE_PATH='C:/ProgramData/chocolatey/bin/;C:/Strawberry/c/bin/' `
                -DLAF_BACKEND=skia `
                -DSKIA_DIR="$SKIA_DIR" `
                -DSKIA_LIBRARY="$SKIA_OUT_DIR/out/Release-x64/skia.lib" `
                -DSKIA_LIBRARY_DIR="$SKIA_OUT_DIR/out/Release-x64" `
                -G Ninja ..

      - name: Run Ninja
        working-directory: aseprite/build
        run: ninja aseprite

      - name: Clean up build
        working-directory: aseprite/build/bin
        shell: bash
        run: rm -f gen modp_b64_gen gen.exe gen.exe.manifest modp_b64_gen.exe modp_b64_gen.exe.manifest

      - name: Copy OpenSSL DLLs
        working-directory: aseprite/build/bin
        run: |
          Copy-Item "C:\Program Files\OpenSSL\bin\libcrypto-1_1-x64.dll" ./
          Copy-Item "C:\Program Files\OpenSSL\bin\libssl-1_1-x64.dll" ./
        shell: pwsh

      - name: Download Visual C++ Redistributable
        run: |
          Invoke-WebRequest -Uri https://aka.ms/vs/17/release/vc_redist.x64.exe -OutFile vc_redist.x64.exe
          Start-Process -FilePath .\vc_redist.x64.exe -ArgumentList '/install', '/quiet', '/norestart' -Wait
        shell: pwsh

      - name: Copy Runtime DLLs
        working-directory: aseprite/build/bin
        shell: pwsh
        run: |
          # Copy required Visual C++ Runtime DLLs from System32
          Copy-Item "C:\Windows\System32\msvcp140.dll" ./
          Copy-Item "C:\Windows\System32\vcruntime140.dll" ./
          Copy-Item "C:\Windows\System32\vcruntime140_1.dll" ./

      - name: (Windows) Make portable zip
        working-directory: aseprite/build/bin
        shell: pwsh
        run: |
          echo '# This file is here so Aseprite behaves as a portable program' > aseprite.ini
          # Copy Skia DLLs
          Copy-Item "../../skia/out/Release-x64/*.dll" ./ -ErrorAction SilentlyContinue

      - name: Create release zip
        working-directory: aseprite/build/bin
        run: 7z -tzip a Aseprite-${{ steps.aseprite_version.outputs.version }}-${{ runner.os }}.zip *

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: build-${{ steps.aseprite_version.outputs.version }}
          release_name: Aseprite Build ${{ steps.aseprite_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: aseprite/build/bin/Aseprite-${{ steps.aseprite_version.outputs.version }}-${{ runner.os }}.zip
          asset_name: Aseprite-${{ steps.aseprite_version.outputs.version }}-${{ runner.os }}.zip
          asset_content_type: application/zip
